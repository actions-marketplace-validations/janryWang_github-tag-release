{"version":3,"file":"git.js","sourceRoot":"","sources":["../src/git.ts"],"names":[],"mappings":"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","sourcesContent":["import github from '@actions/github'\nimport semver from 'semver'\nimport { GithubToken } from './constants'\nimport { shell } from './shell'\n\nexport async function changedPaths(sha: string): Promise<string[]> {\n  return (\n    await shell('git', [\n      'show',\n      '-m',\n      '--name-only',\n      '--pretty=format:',\n      '--first-parent',\n      sha,\n    ])\n  ).stdout.split('\\n')\n}\n\nexport async function getSortableAllTags() {\n  return (await shell('git', ['tag', '-l'])).stdout.split(/\\n/).sort((a, b) => {\n    const v1 = a.replace(/^v/, '')\n    const v2 = b.replace(/^v/, '')\n    return semver.gte(v1, v2) ? -1 : 1\n  })\n}\n\nexport async function getCurrentBranch() {\n  return (await shell('git', ['branch', '--show-current'])).stdout\n}\n\nexport async function getTaggedTime(tag: string) {\n  return (await shell('git', ['log', '-1', '--format=%ai', tag])).stdout\n}\n\nexport function getGithubToken() {\n  return GithubToken\n}\n\nexport function getGithubRepoLink() {\n  const repo = github.context.repo\n  return `https://github.com/${repo.owner}/${repo.repo}`\n}\n/**\n * All existing tags in the repository\n */\nexport async function listTagNames() {\n  return (await shell('git', ['tag'])).stdout.split('\\n').filter(Boolean)\n}\n\n/**\n * The latest reachable tag starting from HEAD\n */\nexport async function lastTag() {\n  return (await shell('git', ['describe', '--abbrev=0', '--tags'])).stdout\n}\n\nexport async function getPreviousTag(current: string) {\n  return (\n    await shell('git', ['describe', '--abbrev=0', '--tags', current + '^'])\n  ).stdout\n}\n\nexport interface CommitListItem {\n  sha: string\n  refName: string\n  summary: string\n  date: string\n  author: string\n}\n\nexport function parseLogMessage(commit: string): CommitListItem | null {\n  const parts =\n    commit.match(\n      /hash<(.+)> ref<(.*)> message<(.*)> date<(.*)> author<(.*)>/\n    ) || []\n\n  if (!parts || parts.length === 0) {\n    return null\n  }\n\n  return {\n    sha: parts[1],\n    refName: parts[2],\n    summary: parts[3],\n    date: parts[4],\n    author: parts[5],\n  }\n}\n\nexport async function listCommits(\n  from: string,\n  to = ''\n): Promise<CommitListItem[]> {\n  // Prints \"hash<short-hash> ref<ref-name> message<summary> date<date>\"\n  // This format is used in `getCommitInfos` for easily analize the commit.\n  return (\n    await shell('git', [\n      'log',\n      '--oneline',\n      '--pretty=\"hash<%h> ref<%D> message<%s> date<%cd> author<%an>\"',\n      '--date=short',\n      `${from}..${to}`,\n    ])\n  ).stdout\n    .split('\\n')\n    .filter(Boolean)\n    .map(parseLogMessage)\n    .filter(Boolean)\n}\n"]}