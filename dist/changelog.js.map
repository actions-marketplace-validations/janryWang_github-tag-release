{"version":3,"file":"changelog.js","sourceRoot":"","sources":["../src/changelog.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport { compareTwoStrings } from 'string-similarity'\nimport {\n  listCommits,\n  lastTag,\n  getTaggedTime,\n  getGithubRepoLink,\n  getSortableAllTags,\n} from './git'\nimport {\n  LernaJSON,\n  PkgJSON,\n  ChangelogLimit,\n  AutoCommitMessage,\n} from './constants'\n\nconst CommitGroupBy: Array<[string, string[]]> = [\n  [':tada: Enhancements', ['feat', 'features', 'feature']],\n  [':bug: Bug Fixes', ['bug', 'bugfix', 'fix']],\n  [':boom: Breaking Changes', ['breaking', 'break']],\n  [':memo: Documents Changes', ['doc', 'docs']],\n  [':rose: Improve code quality', ['refactor', 'redesign']],\n  [':rocket: Improve Performance', ['perf']],\n  [':hammer_and_wrench: Update Workflow Scripts', ['build']],\n  [':construction: Add/Update Test Cases', ['test']],\n  [':blush: Other Changes', ['chore', 'ci', 'style']],\n]\n\nconst isPublishMessage = (str: string) => {\n  if (/chore\\(\\s*(?:versions?|publish|release)\\s*\\)/.test(str)) return true\n  return /publish v?(?:\\d+)\\.(?:\\d+)\\.(?:\\d+)/.test(str)\n}\n\nconst isGithubTagReleaseCommit = (str: string) => {\n  return str.includes(AutoCommitMessage)\n}\n\nconst getCurrentChanges = async (from: string, to = 'HEAD') => {\n  const contents = []\n  return (await listCommits(from, to)).filter(({ summary }) => {\n    if (contents.some((target) => compareTwoStrings(target, summary) > 0.5))\n      return false\n    if (isPublishMessage(summary)) return false\n    if (isGithubTagReleaseCommit(summary)) return false\n    contents.push(summary)\n    return true\n  })\n}\n\nconst getGroupChanges = async (from: string, to = 'HEAD') => {\n  const changes = await getCurrentChanges(from, to)\n  const results: Array<[string, string[]]> = CommitGroupBy.map(([group]) => [\n    group,\n    [],\n  ])\n  changes.forEach(({ summary, author, sha }) => {\n    for (const [group, value] of CommitGroupBy) {\n      if (value.some((target) => summary.indexOf(target) === 0)) {\n        results.forEach((item) => {\n          if (item[0] === group) {\n            item[1].push(\n              `[${summary}](${getGithubRepoLink()}/commit/${sha}) :point_right: ( [${author}](https://github.com/${author}) )`\n            )\n          }\n        })\n      }\n    }\n  })\n  return results.filter(([, value]) => {\n    return value.length > 0\n  })\n}\n\nexport const createChangelog = async (from?: string, to = 'HEAD') => {\n  const isHead = to === 'HEAD'\n  const headVersion = isHead ? LernaJSON?.version ?? PkgJSON?.version : to\n  const changes = await getGroupChanges(from ?? (await lastTag()), to)\n  const nowDate = isHead\n    ? moment().format('YYYY-MM-DD')\n    : moment(await getTaggedTime(to), 'YYYY-MM-DD').format('YYYY-MM-DD')\n  const log = changes\n    .map(([group, contents]) => {\n      return `\n### ${group}\n${contents\n  .map((content) => {\n    return `\n1. ${content}    \n`\n  })\n  .join('')}  \n`\n    })\n    .join('')\n  return `\n## ${headVersion}(${nowDate})\n\n${log ? log : '### No Change Log'}\n`\n}\n\nexport const createChangelogFile = async () => {\n  const tags = (await getSortableAllTags()).slice(0, ChangelogLimit)\n  let contents = ''\n  for (let index = 0; index < tags.length; index++) {\n    const newer = tags[index]\n    const older = tags[index + 1]\n    if (older) {\n      contents += await createChangelog(older, newer)\n    }\n  }\n  return `\n  # Changelog\n  ${contents}  \n  `\n}\n"]}